name: Workflow - build/push

on:
  push:
    branches:
      - master
  pull_request:

env:
  # Variavel de ambiente vista para qualquer job
  # nome da imagem - altere para o nome correto
  IMAGE_NAME: nome-imagem

jobs:
  # Teste de build
  # Ver mais https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Executando testes
       # Testa se o arquivo 'builda'
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  # Push da imagem para o registry do github
  push:
    # Condicao para somente fazer o push se o job test executou com sucesso
    needs: test

    runs-on: ubuntu-18.04
    # Só executa se o evento atual for push (e não um PR)
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        # chamada da variavel IMAGE_NAME definida em env 
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Login no GitHub Container Registry
      # Personal Access Token (PAT) criado e adicionado no Actions Secrets.
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push da imagem para GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          # Transformar nome da imagem de maiúsculas para minúsculas 
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Retira o prefixo git ref da versão
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Retirar prefixo v da tag
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use tag latest como convenção para docker:latest
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          # comandos finais para push
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  
  email:
    # Condicao para somente fazer o push se o job test executou com sucesso
    #needs: push
    runs-on: ubuntu-18.04

    steps:
      #- name: Send mail
        #uses: dawidd6/action-send-mail@v2
        #with:
          #server_address: smtp.sendgrid.net
          #server_port: 587
          #username: apikey
          #password: ${{secrets.SMTP_SENDGRID_KEY}}
          #subject: Github Actions job result
          #body: Build job of ${{github.repository}} completed successfully!
          #to: lulusendgrid@riseup.net
          #    from: Marllus <lulusendgrid@riseup.net> # <user@example.com>
        # Read file contents as body:
        #body: file://README.md
        # Optional content type (defaults to text/plain):
        #content_type: text/html
        # Optional attachments:
        #attachments: attachments.zip,git.diff,./dist/static/main.js

      - name: Send email
        uses: devellany/send-mail@v1.0.2
        with:
          host: smtp.sendgrid.net
      # Optional port (defaults to 465)
          port: 587
          account: apikey
          password: ${{ secrets.SMTP_SENDGRID_KEY }}
          sender: lulu
          from: lulusendgrid@riseup.net
          to: marlluslustosa@gmail.com
          subject: mensagem de teste
          body: minha mensagem de teste!
      # Optional content type (defaults to text/plain)
      #contentType: text/plain
      # Optional attachment files (JSON type. require property 'path')
          #attachments: '[{"path":"README.md"}]'
